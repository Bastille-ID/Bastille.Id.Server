<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>
<#
    var project = FindProject();
    string className = "ResourceKeys";
    string resourceFileName = "Resources.resx";
    string resourcesDir = Path.GetDirectoryName(Host.TemplateFile);
    string projectDir = Path.GetDirectoryName(project.FullName);
    string relativePath = resourcesDir.Substring(projectDir.Length);
    string resourcesFile = Host.ResolvePath(resourceFileName);
    string resourceNamespace = project.Name;
    if (!string.IsNullOrEmpty(relativePath))
        resourceNamespace += relativePath.Replace('\\', '.');

    string baseName = string.Format("{0}.{1}", resourceNamespace, className);

    var doc = XDocument.Load(resourcesFile);
    var entries =
        from d in doc.Root.Elements("data")
        select new
        {
            Name = d.Attribute("name").Value,
            Value = d.Element("value").Value
        };
#>
// <auto-generated />
/*
 * Bastille.ID Identity Server
 * (c) Copyright Talegen, LLC.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/
namespace <#= resourceNamespace #>
{
    /// <summary>
    /// This class is automatically generated and will create resource keys for use within the application.
    /// </summary>
    public static class <#= className #>
    {<# foreach(var entry in entries) { #>

        /// <summary>
        /// Gets the key for the <#= entry.Name #> resource string.
        /// </summary>
        public const string <#= entry.Name #> = "<#= entry.Name #>"; 
<# } #>
    }
}
<#+
static string Ellipsis(string s, int maxLength)
{
    if (s.Length <= maxLength)
        return s;
    return s.Substring(0, maxLength) + "...";
}

Project FindProject()
{
    IServiceProvider serviceProvider = (IServiceProvider)Host;
    DTE dte = (DTE)serviceProvider.GetService(typeof(DTE));
    string templateFileName = Host.TemplateFile;
    var item = dte.Solution.FindProjectItem(Host.TemplateFile);
    if (item != null && item.ContainingProject != null)
        return item.ContainingProject;
    throw new InvalidOperationException("Can't find project name");
}

#>